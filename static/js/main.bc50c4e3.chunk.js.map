{"version":3,"sources":["store/index.js","stores/TodoModel.js","stores/TodoStore.js","components/TodoEntry.js","components/TodoItem.js","components/TodoItems.js","components/TodoFooter.js","App.js","serviceWorker.js","index.js"],"names":["this","time","Date","interval","setInterval","clearInterval","observable","action","TodoModel","store","title","completed","id","myList","lastID","console","log","forEach","element","todos","push","result","filterText","filter","t","TodoEntry","state","value","handleKeyDown","event","keyCode","preventDefault","TodoStore","addTodo","setState","className","onChange","target","onKeyDown","type","placeholder","Component","TodoItem","observer","onToggle","props","todo","toggle","checked","onClick","deleteByID","TodoItems","map","showByFilter","class","x","length","href","handleClick","clearCompleted","App","TodoFooter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bc50c4e3.chunk.js","sourcesContent":["import {observable,action} from 'mobx'\r\n\r\nclass Store{\r\n    @observable time\r\n\r\n    constructor(){\r\n        this.time=new Date()\r\n        this.interval=setInterval(()=>{\r\n            this.time=new Date()\r\n        },1000)\r\n    }\r\n\r\n@action\r\npauseClock(){\r\n    clearInterval(this.interval)\r\n}\r\n\r\n@action\r\nstartClock(){\r\n    this.interval=setInterval(()=>{\r\n        this.time=new Date()\r\n    },1000)\r\n}\r\n\r\n}\r\n\r\nconst store=new Store()\r\nexport default store","import {observable,action} from 'mobx'\r\n\r\nexport default class TodoModel{\r\n    store\r\n    id\r\n    @observable title\r\n    @observable completed\r\n\r\nconstructor(store,title,completed,id){\r\nthis.title=title\r\nthis.completed=completed\r\nthis.id=id\r\nthis.store=store\r\n}\r\n\r\n    @action \r\n    toggle(){\r\n        this.completed=!this.completed\r\n    }\r\n}\r\n\r\n","import { observable, action } from \"mobx\";\r\nimport TodoModel from './TodoModel'\r\n\r\nclass TodoStore{\r\n    constructor() {\r\n        // Don't call this.setState() here!\r\n       console.log('constructor')\r\n       this.myList.forEach(element => \r\n        this.todos.push(new TodoModel(this,element.title,element.completed,element.id))\r\n        );\r\n\r\n       this.result=this.todos\r\n      }\r\n   @observable todos=[];\r\n\r\n   myList=[\r\n       {\r\n           title:\"شستن دست ها\",\r\n           id:100,\r\n           completed:true\r\n       },\r\n       {\r\n        title:\"ماسک زدن\",\r\n        id:101,\r\n        completed:false\r\n    },\r\n    {\r\n        title:\"در خانه ماندن #StayAtHome\",\r\n        id:102,\r\n        completed:true\r\n    }\r\n    ,\r\n    {\r\n        title:\"حفظ فاصله اجتماعی\",\r\n        id:103,\r\n        completed:true\r\n    }\r\n   ]\r\n \r\n    lastID=104\r\n@observable result\r\n   @action\r\n   addTodo(title){\r\n       this.todos.push(new TodoModel(this,title,false,this.lastID++))\r\n   }\r\n\r\n   @action\r\n   showByFilter(filterText){\r\n       this.result= this.todos.filter(t=>filterText==-1 || t.completed==filterText)\r\n   }\r\n\r\n   @action\r\n   deleteByID(id){\r\n       this.todos= this.todos.filter(t=>t.id!=id)\r\n       this.result=this.todos\r\n   }\r\n\r\n   @action\r\n   clearCompleted(){\r\n       this.todos= this.todos.filter(t=>t.completed==false)\r\n       this.result=this.todos\r\n   }\r\n   \r\n}\r\n\r\n\r\nconst store=new TodoStore()\r\nexport default store","import React,{ Component } from \"react\";\r\nimport TodoStore from '../stores/TodoStore'\r\n\r\n\r\nclass TodoEntry extends Component{\r\n    state={\r\n        value:''\r\n    }\r\n\r\n    handleKeyDown=event=>{\r\n        //console.log(event.keyCode)\r\n       if(event.keyCode!==13) \r\n       {\r\n           return;\r\n       }\r\n       event.preventDefault()\r\n       TodoStore.addTodo(this.state.value)\r\n      this.setState({\r\n          value:''\r\n      })\r\n    }\r\n\r\nrender(){\r\n    return (\r\n        <header className=\"header\">\r\n<h1>COVID-19 Todo Tasks:</h1>\r\n<input\r\nvalue={this.state.value}\r\nonChange={event=>this.setState({value:event.target.value})}\r\nonKeyDown={\r\n    event=>this.handleKeyDown(event)\r\n}\r\ntype=\"text\"\r\nclassName=\"new-todo\"\r\nplaceholder=\"What needs to be done?\"\r\n/>\r\n</header>\r\n    )\r\n}\r\n}\r\n\r\nexport default TodoEntry","import React,{ Component } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport TodoStore from '../stores/TodoStore'\r\n\r\n@observer\r\nclass TodoItem extends Component{\r\n\r\n  onToggle=()=>{\r\n    this.props.todo.toggle()\r\n  }\r\n\r\nrender(){\r\n    const {todo}=this.props\r\n    return (\r\n\r\n<li className={todo.completed? 'completed' :''}>\r\n  <div className=\"view\">\r\n    <input \r\n    onChange={this.onToggle}\r\n    type=\"checkbox\" \r\n    className=\"toggle\" \r\n    value=\"on\" \r\n    checked={todo.completed}\r\n    />\r\n    <label>{todo.title}</label>\r\n    <button className=\"destroy\" onClick={()=>TodoStore.deleteByID(todo.id)}/>\r\n  </div>\r\n</li>\r\n\r\n    )\r\n}\r\n}\r\n\r\nexport default TodoItem","import React,{ Component } from \"react\";\r\nimport TodoItem from './TodoItem'\r\nimport TodoStore from '../stores/TodoStore'\r\nimport {observer} from 'mobx-react'\r\n\r\n@observer\r\nclass TodoItems extends Component{\r\nrender(){\r\n   \r\n    return (\r\n        <section className=\"main\">\r\n<ul className=\"todo-list\">\r\n    {\r\n        TodoStore.result.map(todo=>{\r\n            return(\r\n<TodoItem todo={todo}/>\r\n            )\r\n        })\r\n    }\r\n\r\n</ul>\r\n</section>\r\n\r\n\r\n\r\n\r\n    )\r\n}\r\n}\r\n\r\nexport default TodoItems","import React,{ Component } from \"react\";\r\nimport TodoItem from './TodoItem'\r\nimport TodoStore from '../stores/TodoStore'\r\nimport {observer} from 'mobx-react'\r\n\r\n@observer\r\nclass TodoItems extends Component{\r\n    handleClick(filterText){\r\n        \r\n       TodoStore.showByFilter(filterText)\r\n      \r\n    }\r\nrender(){\r\n   \r\n    return (\r\n        <footer class=\"footer\">\r\n        {/* <!-- This should be `0 items left` by default --> */}\r\n        <span class=\"todo-count\"><strong>{TodoStore.todos.filter(x=>!x.completed).length}</strong> item left</span>\r\n        {/* <!-- Remove this if you don't implement routing --> */}\r\n        <ul class=\"filters\">\r\n            <li>\r\n                <a class=\"selected\" href=\"#/\" onClick={()=>this.handleClick(-1)}>All</a>\r\n            </li>\r\n            <li>\r\n                <a href=\"#/\" onClick={()=>this.handleClick(false)}>Active</a>\r\n            </li>\r\n            <li>\r\n                <a href=\"#/\" onClick={()=>this.handleClick(true)}>Completed</a>\r\n            </li>\r\n        </ul>\r\n        {/* <!-- Hidden if no completed items are left ? --> */}\r\n        <button class=\"clear-completed\" onClick={()=>TodoStore.clearCompleted()}>Clear completed</button>\r\n    </footer>\r\n\r\n\r\n\r\n\r\n    )\r\n}\r\n}\r\n\r\nexport default TodoItems","import React, { Component } from 'react';\nimport store from './store'\nimport {observer} from 'mobx-react'\nimport TodoEntry from './components/TodoEntry'\nimport TodoItems from './components/TodoItems'\nimport TodoFooter from './components/TodoFooter'\n\n@observer\nclass App extends Component {\n\n  render(){\n    return(\n      <section className=\"todoapp\">\n        <TodoEntry></TodoEntry>\n<TodoItems></TodoItems>\n<TodoFooter></TodoFooter>\n      </section>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}